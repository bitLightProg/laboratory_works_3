/*Вариант  5.
Постpоить класс для pаботы с дробями. Класс должен включать соответствующие поля:
числитель, знаменатель, строковое наименование дроби (динамическое выделение памяти),
например, «три четверти» или «две пятых».

Класс должен обеспечивать пpостейшие функции для pаботы с данными классами:
сложение, вывод дроби в удобной форме.

Для класса из лаб. работы №1 реализовать набор операций для работы с объектами класса:
сложение (как метод класса), вычитание (как дружественную функцию), инкремент постфиксный
и префиксный, преобразование к разным типам (по усмотрению студентов и преподавателя).

Для класса из лаб. работы №2 перегрузить операции ввода/вывода, позволяющие осуществлять
ввод и вывод в удобной фоpме объектов классов:
•	вывод в текстовый файл;
•	ввод/вывод из двоичного файла / в двоичный файл.

Для классов предыдущей лабораторной работы реализовать иерархию, изменяя отдельные методы
и добавляя члены-данные (по усмотрению студента и преподавателя).
В иерархию должно входить 2 производных класса. Один из методов должен быть виртуальным.

Реализовать с помощью классов динамическую списочную структуру, содержащую объекты классов,
связанных наследованием. В классах реализовать методы добавления, удаления, вставки по номеру,
удаления по номеру, поиска и просмотр всей структуры.

Вариант 5
Структура данных: дек с ограниченным выходом (добавление с двух концов, удаление с одного конца),
реализованный на однонаправленном списке. Способ хранения объектов: объекты.

Добавить в классы и демонстрационную программу обработку исключений при возникновении ошибок:
недостатка памяти, выход за пределы диапазона допустимых значений и т.д.
*/
#include <iostream>
#include <fstream>
#include <Windows.h>

#include "Fraction.h"
#include "CeilFraction.h"
#include "FloorFraction.h"
#include "Deq.h"

int main() {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);

	Fraction a;
	try {
		a = a + a;
	}
	catch (std::exception ex) {
		std::cout << ex.what() << std::endl;
	}

	try {
		a++;
	}
	catch (std::exception ex) {
		std::cout << ex.what() << std::endl;
	}

	try {
		++a;
	}
	catch (std::exception ex) {
		std::cout << ex.what() << std::endl;
	}

	std::ofstream output("out.txt");
	std::ofstream bin_out("out.bin");

	try {
		output << a;
	}
	catch (std::exception ex) {
		std::cout << ex.what() << std::endl;
	}

	try {
		a.write(bin_out);
	}
	catch (std::exception ex) {
		std::cout << ex.what() << std::endl;
	}

	CeilFraction b;
	FloorFraction c;
	try {
		b.print();
	}
	catch (std::exception ex) {
		std::cout << ex.what() << std::endl;
	}

	try {
		c.print();
	}
	catch (std::exception ex) {
		std::cout << ex.what() << std::endl;
	}

	Deq deq1;
	try {
		deq1.pop_forward();
	}
	catch (std::exception ex) {
		std::cout << ex.what() << std::endl;
	}

	try {
		deq1.search(1, 0);
	}
	catch (std::exception ex) {
		std::cout << ex.what() << std::endl;
	}

	try {
		deq1.print_all();
	}
	catch (std::exception ex) {
		std::cout << ex.what() << std::endl;
	}

	system("pause");
	return 0;
}