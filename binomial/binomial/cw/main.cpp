/*
8. Реализовать АТД «Файловая структура данных» в соответствии с вариантом. (начальный балл  5)
Операции АТД:
Insert – вставка записи в файл,
Delete – удаление записи из файла,
Search - поиск записи в файле.

1.	Элементом данных, хранящихся в файле, является запись, имеющая уникальное ключевое значение.
2.	Запись в файле представлена индексом, т.е. парой (k,p), где k – ключевое значение,
	p – файловый указатель на начало записи в файле.
3.	Для файла данных поддерживается файловая структура индексов, указанная в варианте задания.
4.	Файл индексов имеет страничную структуру. Страницы содержат индексы записей и имеют фиксированный размер.
5.	Чтение и запись в файл индексов ведется постранично.
6.	Тестирование файловой структуры ведется для различных значений параметров:
	N – число записей в файле данных, N = 10^3, 10^4, 10^5, 10^6,
	M – число индексов на странице файла индексов, M = 10,100, 1000.
7.	Число обращений к блокам файла индексов в процессе выполнения операций должно соответствовать:
	для хешированного файла  - N/(M*K), где K – число сегментов хеш – таблицы,
	для индексированного файла – 2 + log(N/M),
	для B- дерева файла – 2 + logt (N/M), где t – степень В – дерева.

4.	АТД «Плотный индекс файла». Записи закрепленные. Ключ записи - вещественное число.
*/

#include <Windows.h>
#include "FileBase.h"
#include "Fraction.h"

int main() {
	SetConsoleOutputCP(1251);
	SetConsoleCP(1251);

	std::ofstream ("my_base.bin");
	std::ofstream ("idx_my_base.bin");
	int b = 10;
	FileBase a("my_base.bin", 1000);
	Fraction c(0,1,"Один");
	//a.insert_item(&c);
	/*float random_float = 1 + rand();
	std::cout << RAND_MAX << std::endl;*/
	char ch[256];
	for (int i = 0; i < 256; ++i) {
		ch[i] = 48 + rand() % 30;
	}
	for (int i = 0; i < 1000000; ++i) {
		int sz = 1 + rand() % 256;
		a.insert_item(ch,sz);
	}
	/*char ch[256];
	int sz = 256;
	for (int i = 0; i < sz; ++i) {
		ch[i] = i;
	}
	srand(time(NULL));
	int N = 1000000;
	for (int i = 0; i < N; ++i) {
		a.insert_item(ch, 1 + rand() % 256);
	}
	int del = rand() % N;
	for (int i = 0; i < del; ++i) {
		try {
			a.delete_item(rand() % N);
		}
		catch (std::exception ex) {
			std::cout << ex.what() << std::endl;
		}
	}*/
	
	a.print_keys();
	float max = 3.402823466e+38;
	std::cout << max << std::endl;
	
	return 0;
}